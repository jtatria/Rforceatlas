// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "Rforceatlas_types.hpp"
#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

// forceatlas
RMatD forceatlas(RMatD m, int iter, bool linlog, bool nohubs, scalar k, scalar G, scalar ks, scalar ksmax, scalar delta, scalar tol, ind dim, Nullable<RMatD> init, Nullable<RVecD> center);
RcppExport SEXP _Rforceatlas_forceatlas(SEXP mSEXP, SEXP iterSEXP, SEXP linlogSEXP, SEXP nohubsSEXP, SEXP kSEXP, SEXP GSEXP, SEXP ksSEXP, SEXP ksmaxSEXP, SEXP deltaSEXP, SEXP tolSEXP, SEXP dimSEXP, SEXP initSEXP, SEXP centerSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< RMatD >::type m(mSEXP);
    Rcpp::traits::input_parameter< int >::type iter(iterSEXP);
    Rcpp::traits::input_parameter< bool >::type linlog(linlogSEXP);
    Rcpp::traits::input_parameter< bool >::type nohubs(nohubsSEXP);
    Rcpp::traits::input_parameter< scalar >::type k(kSEXP);
    Rcpp::traits::input_parameter< scalar >::type G(GSEXP);
    Rcpp::traits::input_parameter< scalar >::type ks(ksSEXP);
    Rcpp::traits::input_parameter< scalar >::type ksmax(ksmaxSEXP);
    Rcpp::traits::input_parameter< scalar >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< scalar >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< ind >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< Nullable<RMatD> >::type init(initSEXP);
    Rcpp::traits::input_parameter< Nullable<RVecD> >::type center(centerSEXP);
    rcpp_result_gen = Rcpp::wrap(forceatlas(m, iter, linlog, nohubs, k, G, ks, ksmax, delta, tol, dim, init, center));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_Rforceatlas_forceatlas", (DL_FUNC) &_Rforceatlas_forceatlas, 13},
    {NULL, NULL, 0}
};

RcppExport void R_init_Rforceatlas(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
